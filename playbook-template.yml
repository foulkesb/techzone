---
- name: Configure cloud account with default settings
  hosts: localhost
  gather_facts: false
  collections:
  - ibm.cloudcollection

  tasks:
    - name: Fetch the variables from var file
      ansible.builtin.include_vars:
        file: extra_vars.yml

    - name: Set facts for supplied variables to convert from json
      ansible.builtin.set_fact:
        extra_variables_json: "{{ extra_variables|from_json }}"


    - name: Show all variables
      ansible.builtin.debug:
        msg: 
         - "extra_variables: {{ extra_variables_json }}"

# # Resource Group setup
#     - name: Check resource group '{{ resource_group_name }}' exists
#       ibm_resource_group_info:
#         name: "{{ resource_group_name }}"
#         ibmcloud_api_key: "{{ apikey }}"
#       failed_when: 
#          - rg_exists.rc != 0
#          - '"Given Resource Group is not found in the account" not in rg_exists.stderr'     
#       register: rg_exists
#       delay: "{{ delay_seconds }}"
#       retries: "{{ retry_count }}"
#       until: rg_exists is not failed

#     - name: Create resource group '{{ resource_group_name }}'
#       ibm_resource_group:
#         name: "{{ resource_group_name }}"
#         ibmcloud_api_key: "{{ apikey }}"
#       register: rg_create
#       when: rg_exists.rc != 0 or rg_exists.rc is not defined
#       delay: "{{ delay_seconds }}"
#       retries: "{{ retry_count }}"
#       until: rg_create is not failed

#     - name: Set fact for resource group '{{ resource_group_name }}'
#       set_fact:
#         cacheable: True
#         resource_group: "{% if rg_exists.rc == 0 %}{{ rg_exists.resource }}{% else %}{{ rg_create.resource }}{% endif %}"

#     - name: Configure Access Groups
#       ansible.builtin.include_tasks:
#         file: access-group-playbook.yml
#       loop: "{{ access_group_list }}"
#       loop_control:
#         loop_var: ag

# # ------------------------------------------- Run above ^ --------

    # # ibm_is_regions_info is non-functional in ansible, so use ibmcloud is resources --output json to obtain listing
    # # ibm.cloudcollection.ibm_is_regions_info:

    # - name: Get all regions for the cloud account
    #   ansible.builtin.shell: 
    #     cmd: |
    #       export IBMCLOUD_API_KEY={{ apikey }}
    #       export CLOUD_CMD=$(which ibmcloud)
    #       $CLOUD_CMD login --apikey $IBMCLOUD_API_KEY -r us-south -g {{ resource_group.name }} --quiet &>/dev/null
    #       $CLOUD_CMD is regions --output json|jq '.|sort_by("name")|reverse'
    #   register: regions
    #   delay: "{{ delay_seconds }}"
    #   retries: "{{ retry_count }}"
    #   until: regions is not failed

# # ----------------------- and this v -------------------------------------------
#     - name: Operate on each region
#       ansible.builtin.include_tasks: 
#         file: region-playbook.yml
#       # loop: "{{ regions.stdout }}"
#       loop: [ "us-south" ]
#       loop_control:
#         loop_var: region
# # ----------------------- to here ^ -------------------------------------------
# - name: Configure newly created VSIs with guacamole daemon
#   hosts: new_vsi
#   gather_facts: false
#   remote_user: root
#   tasks:

#     - name: Fetch the variables from var file
#       ansible.builtin.include_vars:
#         file: vars.yml

#     - name: Include tasks from guacamole daemon setup playbook
#       ansible.builtin.include_tasks:
#         file: guacd-setup-playbook.yml
#       when: setup_guacd is defined
